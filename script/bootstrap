#!/usr/bin/env bash
#
# bootstrap installs things.

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd -P)

set -e

echo ''

info () {
  printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
  printf "\r  [ \033[0;33m??\033[0m ] $1\n"
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

setup_gitconfig () {
  if ! [ -f git/gitconfig.local.symlink ]
  then
    info 'setup gitconfig'

    git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]
    then
      git_credential='osxkeychain'
    fi

    user ' - What is your github author name?'
    read -e git_authorname
    user ' - What is your github author email?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" > git/gitconfig.local.symlink

    success 'gitconfig'
  fi
}


link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

install_dotfiles () {
  info 'installing dotfiles'

  link_file "$DOTFILES_ROOT" "$HOME/.dotfiles"

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink' -not -path '*.git*' -not -path '*oh-my-zsh.sh.symlink')
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}

setup_oh_my_zsh () {
  info 'Setting up oh my zsh'

  export RUNZSH="no"

  if ! [ -d "$HOME/.oh-my-zsh" ]
  then
    sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
    local overwrite_all=true backup_all=false skip_all=false
  else
    local overwrite_all=false backup_all=false skip_all=false
  fi

  link_file "$DOTFILES_ROOT/zsh/oh-my-zsh.sh.symlink" "$HOME/.oh-my-zsh/oh-my-zsh.sh"
}

setup_oh_my_zsh_plugins () {
  info 'Settings up oh my zsh plugins'
  ZSH_CUSTOM="$ZSH/custom"
  for i in "https://github.com/zsh-users/zsh-autosuggestions zsh-autosuggestions"\
  "https://github.com/zsh-users/zsh-syntax-highlighting zsh-syntax-highlighting"\
  "https://github.com/agkozak/zsh-z zsh-z"
  do
    set -- $i
    if ! [ -d "$ZSH_CUSTOM/plugins/$2" ]
    then
      git clone "$1" "$ZSH_CUSTOM/plugins/$2" &>/dev/null
    fi
  done
}

setup_xcode() {
  info 'Setting up Xcode'
  local overwrite_all=false backup_all=false skip_all=false
  link_file "$DOTFILES_ROOT/xcode/Default.idekeybindings" "$HOME/Library/Developer/Xcode/UserData/KeyBindings/Default.idekeybindings"
  for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.codesnippet')
  do
    dst="$HOME/Library/Developer/Xcode/UserData/CodeSnippets/$(basename "$src")"
    link_file "$src" "$dst"
  done
}

setup_vscode() {
  info 'Setting up VS Code'
  local overwrite_all=false backup_all=false skip_all=false
  mkdir -p ""$HOME/Library/Application Support/Code/User"
  link_file "$DOTFILES_ROOT/vs_code/settings.json" "$HOME/Library/Application Support/Code/User/settings.json"
  link_file "$DOTFILES_ROOT/vs_code/keybindings.json" "$HOME/Library/Application Support/Code/User/keybindings.json"
}

# setup_xcode
setup_vscode
setup_gitconfig
setup_oh_my_zsh
setup_oh_my_zsh_plugins
install_dotfiles

# If we're on a Mac, let's install and setup homebrew.
if [ "$(uname -s)" == "Darwin" ]
then
  info "installing dependencies"
  if source bin/dotfile | while read -r data; do info "$data"; done
  then
    success "dependencies installed"
  else
    fail "error installing dependencies"
  fi
fi

echo ''
printf "\r\033[2K  \033[00;32mSetup complete! âœ¨\033[0m\n"

exec zsh -l
